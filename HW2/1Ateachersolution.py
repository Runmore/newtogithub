#!/usr/bin/env python3
#s="CCTCGTCCCCTCGTCCCGTTGAACATTTACAACAATTTTGTGGGATTTTGTGGGATTTTGTGGGGCACACGGTAGCACACGGTAATTTACAACAATTTTGTGGGATTTACAACAATTTACAACAATTTTGTGGGCGTTGAACCCTCGTCCCGTTGAACCGTTGAACGCACACGGTAGCACACGGTAATTTTGTGGGATTTACAACAATTTTGTGGGGCACACGGTAATTTTGTGGGCCTCGTCCCGTTGAACATTTACAACAGCACACGGTAATTTACAACACCTCGTCCATTTTGTGGGCCTCGTCCCCTCGTCCGCACACGGTACCTCGTCCGCACACGGTAATTTTGTGGGCGTTGAACCGTTGAACGCACACGGTAATTTTGTGGGATTTTGTGGGATTTTGTGGGATTTACAACACCTCGTCCCCTCGTCCCGTTGAACCCTCGTCCGCACACGGTAATTTTGTGGGATTTTGTGGGATTTACAACAGCACACGGTACGTTGAACATTTTGTGGGATTTTGTGGGCCTCGTCCGCACACGGTAGCACACGGTAATTTTGTGGGCGTTGAACATTTACAACACGTTGAACGCACACGGTACGTTGAACATTTTGTGGGGCACACGGTAATTTACAACAATTTACAACACGTTGAACATTTTGTGGGATTTACAACACCTCGTCCGCACACGGTAGCACACGGTAGCACACGGTACGTTGAACCCTCGTCCATTTACAACAATTTTGTGGGATTTACAACAGCACACGGTAGCACACGGTAATTTACAACAGCACACGGTAGCACACGGTACCTCGTCCATTTTGTGGGCGTTGAACGCACACGGTACGTTGAACCCTCGTCCCGTTGAACCGTTGAACATTTACAACACGTTGAACGCACACGGTACCTCGTCC"
#k=14

def frequent_k_mers( s, k ) :
    count = {"CCTCGTCCCCTCGTCCCGTTGAACATTTACAACAATTTTGTGGGATTTTGTGGGATTTTGTGGGGCACACGGTAGCACACGGTAATTTACAACAATTTTGTGGGATTTACAACAATTTACAACAATTTTGTGGGCGTTGAACCCTCGTCCCGTTGAACCGTTGAACGCACACGGTAGCACACGGTAATTTTGTGGGATTTACAACAATTTTGTGGGGCACACGGTAATTTTGTGGGCCTCGTCCCGTTGAACATTTACAACAGCACACGGTAATTTACAACACCTCGTCCATTTTGTGGGCCTCGTCCCCTCGTCCGCACACGGTACCTCGTCCGCACACGGTAATTTTGTGGGCGTTGAACCGTTGAACGCACACGGTAATTTTGTGGGATTTTGTGGGATTTTGTGGGATTTACAACACCTCGTCCCCTCGTCCCGTTGAACCCTCGTCCGCACACGGTAATTTTGTGGGATTTTGTGGGATTTACAACAGCACACGGTACGTTGAACATTTTGTGGGATTTTGTGGGCCTCGTCCGCACACGGTAGCACACGGTAATTTTGTGGGCGTTGAACATTTACAACACGTTGAACGCACACGGTACGTTGAACATTTTGTGGGGCACACGGTAATTTACAACAATTTACAACACGTTGAACATTTTGTGGGATTTACAACACCTCGTCCGCACACGGTAGCACACGGTAGCACACGGTACGTTGAACCCTCGTCCATTTACAACAATTTTGTGGGATTTACAACAGCACACGGTAGCACACGGTAATTTACAACAGCACACGGTAGCACACGGTACCTCGTCCATTTTGTGGGCGTTGAACGCACACGGTACGTTGAACCCTCGTCCCGTTGAACCGTTGAACATTTACAACACGTTGAACGCACACGGTACCTCGTCC"}  # Make an empty associative array to keep counts
    mx = 14      # Maximum number of k-words found so far  
    for i in range(len(s)-k+1) :
      kword = s[i:i+k]
      count[kword] = count.get(kword,0)+1  # not in map? set to 1
    mx = max(count.values())               # find max count value
    
    # create list of k-words which have a count of mx
    mxlist = [ item[0] for item in count.items() if item[1] == mx ]
    return " ".join( mxlist )
    
print